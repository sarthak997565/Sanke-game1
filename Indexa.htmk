<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Modern Snake Game</title>
  <style>
    * {
      box-sizing: border-box;
    }
    body {
      background-color: #0a0a0a;
      color: #00ff66;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
    }

    h1 {
      margin: 10px;
    }

    #score {
      font-size: 1.5rem;
      margin-bottom: 10px;
    }

    #game {
      background-color: #111;
      border: 4px solid #00ff66;
      border-radius: 10px;
    }

    #restartBtn {
      margin-top: 10px;
      padding: 12px 24px;
      font-size: 1.2rem;
      background: transparent;
      color: #00ff66;
      border: 2px solid #00ff66;
      border-radius: 50px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    #restartBtn:hover {
      background-color: #00ff66;
      color: #000;
    }

    #restartBtn:active {
      transform: scale(0.95);
    }

    #controls {
      display: grid;
      grid-template-columns: repeat(3, 60px);
      grid-template-rows: repeat(3, 60px);
      gap: 5px;
      margin-top: 15px;
      user-select: none;
    }

    .controlBtn {
      background: transparent;
      color: #00ff66;
      border: 2px solid #00ff66;
      font-size: 24px;
      border-radius: 50%;
      cursor: pointer;
      transition: 0.3s ease;
    }

    .controlBtn:hover {
      background-color: #00ff66;
      color: #000;
    }

    .controlBtn:active {
      transform: scale(0.95);
    }

    #upBtn { grid-column: 2; grid-row: 1; }
    #leftBtn { grid-column: 1; grid-row: 2; }
    #downBtn { grid-column: 2; grid-row: 3; }
    #rightBtn { grid-column: 3; grid-row: 2; }

    @media (max-width: 500px) {
      #game {
        width: 300px;
        height: 300px;
      }
      #controls {
        transform: scale(0.8);
      }
    }
  </style>
</head>
<body>
  <h1>Snake Game</h1>
  <div id="score">Score: 0</div>
  <canvas id="game" width="400" height="400"></canvas>
  <button id="restartBtn">Restart</button>

  <div id="controls">
    <button id="upBtn" class="controlBtn">↑</button>
    <button id="leftBtn" class="controlBtn">←</button>
    <button id="downBtn" class="controlBtn">↓</button>
    <button id="rightBtn" class="controlBtn">→</button>
  </div>

  <script>
    const canvas = document.getElementById('game');
    const ctx = canvas.getContext('2d');
    const restartBtn = document.getElementById('restartBtn');
    const scoreDisplay = document.getElementById('score');
    const box = 20;
    let snake, food, direction, score, gameLoop;

    function resetGame() {
      snake = [{ x: 9 * box, y: 9 * box }];
      food = {
        x: Math.floor(Math.random() * 19) * box,
        y: Math.floor(Math.random() * 19) * box,
      };
      direction = 'RIGHT';
      score = 0;
      restartBtn.style.display = 'none';
      scoreDisplay.innerText = 'Score: 0';
      clearInterval(gameLoop);
      gameLoop = setInterval(draw, 100);
    }

    function draw() {
      ctx.fillStyle = '#111';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      for (let i = 0; i < snake.length; i++) {
        ctx.fillStyle = i === 0 ? '#00ff66' : '#00aa44';
        ctx.fillRect(snake[i].x, snake[i].y, box, box);
      }

      ctx.fillStyle = '#ff0044';
      ctx.fillRect(food.x, food.y, box, box);

      let headX = snake[0].x;
      let headY = snake[0].y;

      if (direction === 'LEFT') headX -= box;
      if (direction === 'RIGHT') headX += box;
      if (direction === 'UP') headY -= box;
      if (direction === 'DOWN') headY += box;

      if (
        headX < 0 || headY < 0 ||
        headX >= canvas.width || headY >= canvas.height ||
        snake.some(segment => segment.x === headX && segment.y === headY)
      ) {
        clearInterval(gameLoop);
        restartBtn.style.display = 'inline-block';
        return;
      }

      const newHead = { x: headX, y: headY };
      snake.unshift(newHead);

      if (headX === food.x && headY === food.y) {
        score++;
        scoreDisplay.innerText = 'Score: ' + score;
        food = {
          x: Math.floor(Math.random() * 19) * box,
          y: Math.floor(Math.random() * 19) * box,
        };
      } else {
        snake.pop();
      }
    }

    document.addEventListener('keydown', e => {
      const key = e.key;
      if (key === 'ArrowLeft' && direction !== 'RIGHT') direction = 'LEFT';
      else if (key === 'ArrowUp' && direction !== 'DOWN') direction = 'UP';
      else if (key === 'ArrowRight' && direction !== 'LEFT') direction = 'RIGHT';
      else if (key === 'ArrowDown' && direction !== 'UP') direction = 'DOWN';
    });

    document.getElementById('upBtn').onclick = () => direction !== 'DOWN' && (direction = 'UP');
    document.getElementById('leftBtn').onclick = () => direction !== 'RIGHT' && (direction = 'LEFT');
    document.getElementById('downBtn').onclick = () => direction !== 'UP' && (direction = 'DOWN');
    document.getElementById('rightBtn').onclick = () => direction !== 'LEFT' && (direction = 'RIGHT');
    restartBtn.onclick = resetGame;

    resetGame();
  </script>
</body>
</html>
